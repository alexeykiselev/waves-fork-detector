// Code generated by mockery. DO NOT EDIT.

package chains

import (
	netip "net/netip"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/wavesplatform/gowaves/pkg/proto"
)

// MockHistoryProvider is an autogenerated mock type for the HistoryProvider type
type MockHistoryProvider struct {
	mock.Mock
}

type MockHistoryProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHistoryProvider) EXPECT() *MockHistoryProvider_Expecter {
	return &MockHistoryProvider_Expecter{mock: &_m.Mock}
}

// HasBlock provides a mock function with given fields: id
func (_m *MockHistoryProvider) HasBlock(id proto.BlockID) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for HasBlock")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(proto.BlockID) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(proto.BlockID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(proto.BlockID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHistoryProvider_HasBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasBlock'
type MockHistoryProvider_HasBlock_Call struct {
	*mock.Call
}

// HasBlock is a helper method to define mock.On call
//   - id proto.BlockID
func (_e *MockHistoryProvider_Expecter) HasBlock(id interface{}) *MockHistoryProvider_HasBlock_Call {
	return &MockHistoryProvider_HasBlock_Call{Call: _e.mock.On("HasBlock", id)}
}

func (_c *MockHistoryProvider_HasBlock_Call) Run(run func(id proto.BlockID)) *MockHistoryProvider_HasBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(proto.BlockID))
	})
	return _c
}

func (_c *MockHistoryProvider_HasBlock_Call) Return(_a0 bool, _a1 error) *MockHistoryProvider_HasBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHistoryProvider_HasBlock_Call) RunAndReturn(run func(proto.BlockID) (bool, error)) *MockHistoryProvider_HasBlock_Call {
	_c.Call.Return(run)
	return _c
}

// LastIDs provides a mock function with given fields: id, count
func (_m *MockHistoryProvider) LastIDs(id proto.BlockID, count int) ([]proto.BlockID, error) {
	ret := _m.Called(id, count)

	if len(ret) == 0 {
		panic("no return value specified for LastIDs")
	}

	var r0 []proto.BlockID
	var r1 error
	if rf, ok := ret.Get(0).(func(proto.BlockID, int) ([]proto.BlockID, error)); ok {
		return rf(id, count)
	}
	if rf, ok := ret.Get(0).(func(proto.BlockID, int) []proto.BlockID); ok {
		r0 = rf(id, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]proto.BlockID)
		}
	}

	if rf, ok := ret.Get(1).(func(proto.BlockID, int) error); ok {
		r1 = rf(id, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHistoryProvider_LastIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastIDs'
type MockHistoryProvider_LastIDs_Call struct {
	*mock.Call
}

// LastIDs is a helper method to define mock.On call
//   - id proto.BlockID
//   - count int
func (_e *MockHistoryProvider_Expecter) LastIDs(id interface{}, count interface{}) *MockHistoryProvider_LastIDs_Call {
	return &MockHistoryProvider_LastIDs_Call{Call: _e.mock.On("LastIDs", id, count)}
}

func (_c *MockHistoryProvider_LastIDs_Call) Run(run func(id proto.BlockID, count int)) *MockHistoryProvider_LastIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(proto.BlockID), args[1].(int))
	})
	return _c
}

func (_c *MockHistoryProvider_LastIDs_Call) Return(_a0 []proto.BlockID, _a1 error) *MockHistoryProvider_LastIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHistoryProvider_LastIDs_Call) RunAndReturn(run func(proto.BlockID, int) ([]proto.BlockID, error)) *MockHistoryProvider_LastIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Leash provides a mock function with given fields: addr
func (_m *MockHistoryProvider) Leash(addr netip.Addr) (proto.BlockID, error) {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for Leash")
	}

	var r0 proto.BlockID
	var r1 error
	if rf, ok := ret.Get(0).(func(netip.Addr) (proto.BlockID, error)); ok {
		return rf(addr)
	}
	if rf, ok := ret.Get(0).(func(netip.Addr) proto.BlockID); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(proto.BlockID)
	}

	if rf, ok := ret.Get(1).(func(netip.Addr) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHistoryProvider_Leash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Leash'
type MockHistoryProvider_Leash_Call struct {
	*mock.Call
}

// Leash is a helper method to define mock.On call
//   - addr netip.Addr
func (_e *MockHistoryProvider_Expecter) Leash(addr interface{}) *MockHistoryProvider_Leash_Call {
	return &MockHistoryProvider_Leash_Call{Call: _e.mock.On("Leash", addr)}
}

func (_c *MockHistoryProvider_Leash_Call) Run(run func(addr netip.Addr)) *MockHistoryProvider_Leash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(netip.Addr))
	})
	return _c
}

func (_c *MockHistoryProvider_Leash_Call) Return(_a0 proto.BlockID, _a1 error) *MockHistoryProvider_Leash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHistoryProvider_Leash_Call) RunAndReturn(run func(netip.Addr) (proto.BlockID, error)) *MockHistoryProvider_Leash_Call {
	_c.Call.Return(run)
	return _c
}

// MoveLeash provides a mock function with given fields: id, addr
func (_m *MockHistoryProvider) MoveLeash(id proto.BlockID, addr netip.Addr) error {
	ret := _m.Called(id, addr)

	if len(ret) == 0 {
		panic("no return value specified for MoveLeash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(proto.BlockID, netip.Addr) error); ok {
		r0 = rf(id, addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHistoryProvider_MoveLeash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveLeash'
type MockHistoryProvider_MoveLeash_Call struct {
	*mock.Call
}

// MoveLeash is a helper method to define mock.On call
//   - id proto.BlockID
//   - addr netip.Addr
func (_e *MockHistoryProvider_Expecter) MoveLeash(id interface{}, addr interface{}) *MockHistoryProvider_MoveLeash_Call {
	return &MockHistoryProvider_MoveLeash_Call{Call: _e.mock.On("MoveLeash", id, addr)}
}

func (_c *MockHistoryProvider_MoveLeash_Call) Run(run func(id proto.BlockID, addr netip.Addr)) *MockHistoryProvider_MoveLeash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(proto.BlockID), args[1].(netip.Addr))
	})
	return _c
}

func (_c *MockHistoryProvider_MoveLeash_Call) Return(_a0 error) *MockHistoryProvider_MoveLeash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHistoryProvider_MoveLeash_Call) RunAndReturn(run func(proto.BlockID, netip.Addr) error) *MockHistoryProvider_MoveLeash_Call {
	_c.Call.Return(run)
	return _c
}

// PutBlock provides a mock function with given fields: block, addr
func (_m *MockHistoryProvider) PutBlock(block *proto.Block, addr netip.Addr) error {
	ret := _m.Called(block, addr)

	if len(ret) == 0 {
		panic("no return value specified for PutBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.Block, netip.Addr) error); ok {
		r0 = rf(block, addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHistoryProvider_PutBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutBlock'
type MockHistoryProvider_PutBlock_Call struct {
	*mock.Call
}

// PutBlock is a helper method to define mock.On call
//   - block *proto.Block
//   - addr netip.Addr
func (_e *MockHistoryProvider_Expecter) PutBlock(block interface{}, addr interface{}) *MockHistoryProvider_PutBlock_Call {
	return &MockHistoryProvider_PutBlock_Call{Call: _e.mock.On("PutBlock", block, addr)}
}

func (_c *MockHistoryProvider_PutBlock_Call) Run(run func(block *proto.Block, addr netip.Addr)) *MockHistoryProvider_PutBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.Block), args[1].(netip.Addr))
	})
	return _c
}

func (_c *MockHistoryProvider_PutBlock_Call) Return(_a0 error) *MockHistoryProvider_PutBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHistoryProvider_PutBlock_Call) RunAndReturn(run func(*proto.Block, netip.Addr) error) *MockHistoryProvider_PutBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHistoryProvider creates a new instance of MockHistoryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHistoryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHistoryProvider {
	mock := &MockHistoryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

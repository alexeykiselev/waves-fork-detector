// Code generated by mockery. DO NOT EDIT.

package loading

import mock "github.com/stretchr/testify/mock"

// MockReporter is an autogenerated mock type for the Reporter type
type MockReporter struct {
	mock.Mock
}

type MockReporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReporter) EXPECT() *MockReporter_Expecter {
	return &MockReporter_Expecter{mock: &_m.Mock}
}

// Fail provides a mock function with given fields:
func (_m *MockReporter) Fail() {
	_m.Called()
}

// MockReporter_Fail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fail'
type MockReporter_Fail_Call struct {
	*mock.Call
}

// Fail is a helper method to define mock.On call
func (_e *MockReporter_Expecter) Fail() *MockReporter_Fail_Call {
	return &MockReporter_Fail_Call{Call: _e.mock.On("Fail")}
}

func (_c *MockReporter_Fail_Call) Run(run func()) *MockReporter_Fail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReporter_Fail_Call) Return() *MockReporter_Fail_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReporter_Fail_Call) RunAndReturn(run func()) *MockReporter_Fail_Call {
	_c.Call.Return(run)
	return _c
}

// OK provides a mock function with given fields:
func (_m *MockReporter) OK() {
	_m.Called()
}

// MockReporter_OK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OK'
type MockReporter_OK_Call struct {
	*mock.Call
}

// OK is a helper method to define mock.On call
func (_e *MockReporter_Expecter) OK() *MockReporter_OK_Call {
	return &MockReporter_OK_Call{Call: _e.mock.On("OK")}
}

func (_c *MockReporter_OK_Call) Run(run func()) *MockReporter_OK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReporter_OK_Call) Return() *MockReporter_OK_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReporter_OK_Call) RunAndReturn(run func()) *MockReporter_OK_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReporter creates a new instance of MockReporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReporter {
	mock := &MockReporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

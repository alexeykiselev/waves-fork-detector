// Code generated by mockery. DO NOT EDIT.

package peers

import (
	netip "net/netip"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/wavesplatform/gowaves/pkg/proto"
)

// MockHistoryRequester is an autogenerated mock type for the HistoryRequester type
type MockHistoryRequester struct {
	mock.Mock
}

type MockHistoryRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHistoryRequester) EXPECT() *MockHistoryRequester_Expecter {
	return &MockHistoryRequester_Expecter{mock: &_m.Mock}
}

// ID provides a mock function with given fields:
func (_m *MockHistoryRequester) ID() netip.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 netip.Addr
	if rf, ok := ret.Get(0).(func() netip.Addr); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(netip.Addr)
	}

	return r0
}

// MockHistoryRequester_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockHistoryRequester_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockHistoryRequester_Expecter) ID() *MockHistoryRequester_ID_Call {
	return &MockHistoryRequester_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockHistoryRequester_ID_Call) Run(run func()) *MockHistoryRequester_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHistoryRequester_ID_Call) Return(_a0 netip.Addr) *MockHistoryRequester_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHistoryRequester_ID_Call) RunAndReturn(run func() netip.Addr) *MockHistoryRequester_ID_Call {
	_c.Call.Return(run)
	return _c
}

// RequestBlock provides a mock function with given fields: id
func (_m *MockHistoryRequester) RequestBlock(id proto.BlockID) {
	_m.Called(id)
}

// MockHistoryRequester_RequestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestBlock'
type MockHistoryRequester_RequestBlock_Call struct {
	*mock.Call
}

// RequestBlock is a helper method to define mock.On call
//   - id proto.BlockID
func (_e *MockHistoryRequester_Expecter) RequestBlock(id interface{}) *MockHistoryRequester_RequestBlock_Call {
	return &MockHistoryRequester_RequestBlock_Call{Call: _e.mock.On("RequestBlock", id)}
}

func (_c *MockHistoryRequester_RequestBlock_Call) Run(run func(id proto.BlockID)) *MockHistoryRequester_RequestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(proto.BlockID))
	})
	return _c
}

func (_c *MockHistoryRequester_RequestBlock_Call) Return() *MockHistoryRequester_RequestBlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHistoryRequester_RequestBlock_Call) RunAndReturn(run func(proto.BlockID)) *MockHistoryRequester_RequestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// RequestBlockIDs provides a mock function with given fields: ids
func (_m *MockHistoryRequester) RequestBlockIDs(ids []proto.BlockID) {
	_m.Called(ids)
}

// MockHistoryRequester_RequestBlockIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestBlockIDs'
type MockHistoryRequester_RequestBlockIDs_Call struct {
	*mock.Call
}

// RequestBlockIDs is a helper method to define mock.On call
//   - ids []proto.BlockID
func (_e *MockHistoryRequester_Expecter) RequestBlockIDs(ids interface{}) *MockHistoryRequester_RequestBlockIDs_Call {
	return &MockHistoryRequester_RequestBlockIDs_Call{Call: _e.mock.On("RequestBlockIDs", ids)}
}

func (_c *MockHistoryRequester_RequestBlockIDs_Call) Run(run func(ids []proto.BlockID)) *MockHistoryRequester_RequestBlockIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]proto.BlockID))
	})
	return _c
}

func (_c *MockHistoryRequester_RequestBlockIDs_Call) Return() *MockHistoryRequester_RequestBlockIDs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHistoryRequester_RequestBlockIDs_Call) RunAndReturn(run func([]proto.BlockID)) *MockHistoryRequester_RequestBlockIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHistoryRequester creates a new instance of MockHistoryRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHistoryRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHistoryRequester {
	mock := &MockHistoryRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
